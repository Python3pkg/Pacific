---
- hosts: pacific-develop-vm
  vars:
    project_name: pacific
    instance_owner: vagrant
    home: "/home/{{ instance_owner }}"

    playbooks_home: .
    local_project_home: ./
    local_config_dir: "{{ playbooks_home }}/system_configs"

    vm_project_home: /vagrant
    vm_project_venv: "{{ home }}/venv/{{ project_name }}"
    vm_config_dir: "{{ vm_project_home }}/deploy/system_configs"

    project_static_files_dir: "{{ vm_project_home }}/{{ project_name }}/static"
    project_frontend_files_dir: "{{ vm_project_home }}/{{ project_name }}-frontend"
    project_media_dir: "/tmp/{{ project_name }}/media"
    project_temporary_files_dir: "/tmp/www-junk/{{ project_name }}/tmp/"

    postgres_version: 9.3
    postgres_db_name: "{{ project_name }}"
    postgres_db_user: "{{ project_name }}"
    postgres_db_password: "{{ project_name }}"
    postgres_unix_socket_dir: /var/run/postgresql

    rabbitmq_user: "{{ project_name }}"
    rabbitmq_password: "{{ project_name }}"
    rabbitmq_vhost: "/{{ project_name }}"

    npm_local_bin: "{{ vm_project_home }}/node_modules/.bin"

    locale: en_US.utf8

    pyenv_home: "{{ home }}/pyenv"
    python_version: 3.4.0

  vars_files:
    - vars/hardware.yml

  sudo: yes

  tasks:

    - name: ensure apt cache is up to date
      action: apt update_cache=yes

    - name: Install prerequisite packages
      action: apt pkg={{ item }} state=latest
      with_items:
        - python-apt
        - python-software-properties
        - g++
        - make
        - language-pack-en
        - mc
        - git
        - mercurial

    - name: Set up utf-8 locale
      action: command update-locale {{ item }}={{ locale }}
      with_items:
        - LANG
        - LANGUAGE
        - LC_CTYPE
        - LC_NUMERIC
        - LC_TIME
        - LC_COLLATE
        - LC_MONETARY
        - LC_MESSAGES
        - LC_PAPER
        - LC_NAME
        - LC_ADDRESS
        - LC_TELEPHONE
        - LC_MEASUREMENT
        - LC_IDENTIFICATION
        - LC_ALL

    - name: Add necessary repositories
      action: apt_repository repo={{ item }} state=present
      with_items:
        # Redis >= 2.6
        - ppa:chris-lea/redis-server
        # NodeJS
        - ppa:chris-lea/node.js
        # Nginx
        - ppa:nginx/stable

    - name: ensure apt cache is up to date
      action: apt update_cache=yes

    - name: Install necessary packages
      action: apt pkg={{ item }} state=latest
      with_items:
        - python-dev
        - python3.3-dev
        - libxml2-dev
        - libboost-python-dev
        - libmemcached-dev
        - libyaml-dev
        - curl
        - redis-server
        - nginx-common
        - nginx-extras
        # for PIL
        - libfreetype6
        - libfreetype6-dev
        - libjpeg-dev
        # Speed-ups for pyScss
        - libpcre3-dev

    # PgBouncer & Postgres
    # ----------------------
    - include: includes/postgresql.yml

    # nginx
    # ----------------------
    - name: Set up nginx
      action: template src={{ local_config_dir }}/etc/nginx/{{ item }}.j2 dest=/etc/nginx/{{ item }} owner=root group=root mode=0644
      with_items:
        - nginx.conf
        - sites-available/pacific

    - name: Set up nginx's enabled sites
      action: file src=/etc/nginx/sites-available/{{ item }} path=/etc/nginx/sites-enabled/{{ item }} state=link owner=root group=root mode=0644
      with_items:
        - pacific

    - name: Set up nginx's enabled sites | Disable default server configuration
      action: file src=/etc/nginx/sites-available/{{ item }} path=/etc/nginx/sites-enabled/{{ item }} state=absent owner=root group=root mode=0644
      with_items:
        - default

    - name: Put SSL certificate into nginx system dir
      action: copy src={{ local_config_dir }}/{{ item }} dest=/etc/nginx/{{ item }} owner=root group=www-data mode=0644
      with_items:
        - insecure_ssl.crt
        - insecure_ssl.key

    - name: Restart nginx
      action: command service nginx restart

    # Redis server
    # ----------------------
    - name: Set up Redis
      action: template src={{ local_config_dir }}/etc/redis/{{ item }}.conf.j2 dest=/etc/redis/{{ item }}.conf owner=root group=root mode=0644
      with_items:
        - redis

    - name: Restart redis-server
      action: command service redis-server restart

    # RabbitMQ
    # ----------------------
    - name: Add RabbitMQ repository
      action: apt_repository repo='deb http://www.rabbitmq.com/debian/ testing main'

    - name: Add RabbitMQ apt key
      action: apt_key url=http://www.rabbitmq.com/rabbitmq-signing-key-public.asc state=present

    - name: ensure apt cache is up to date
      action: apt update_cache=yes

    - name: Install RabbitMQ
      action: apt pkg={{ item }} state=latest
      with_items:
        - rabbitmq-server

    - name: Enable RabbitMQ's management plugin
      action: rabbitmq_plugin names=rabbitmq_management state=enabled

    - name: Add RabbitMQ vhost
      action: rabbitmq_vhost name={{ rabbitmq_vhost }} state=present

    - name: Add RabbitMQ user
      action: rabbitmq_user user={{ rabbitmq_user }} password={{ rabbitmq_password }} vhost={{ rabbitmq_vhost }} configure_priv=.* read_priv=.* write_priv=.* state=present

    - name: Restart RabbitMQ
      action: command service rabbitmq-server restart

    # Ruby
    # ----------------------
    # We use Ruby for Sass/Scss
    - name: Install Ruby
      action: apt pkg={{ item }} state=latest
      with_items:
        - ruby
        - rubygems

    # Ruby gems
    # make sure we use 3.2.10 version of sass
    - include: includes/gems.yml

    # NodeJS
    # ----------------------
    - name: Install NodeJS
      action: apt pkg={{ item }} state=present
      with_items:
        - nodejs

    # NPM packages
    # Update packages based on {{ vm_project_home }}/package.json
    - name: Install NPM packages
      action: npm path={{ vm_project_home }}
      ignore_errors: True

    - name: Update system templates
      action:
      action: template src={{ local_config_dir }}/etc/{{ item }}.j2 dest=/etc/{{ item }} owner=root group=root mode=0644
      with_items:
        - environment

    # setup PyEnv
    - include: includes/pyenv.yml


    # Make PIL working properly on Ubuntu x64
    # ---------------------------------------
    - name: Add symlinks to libjpeg for PIL
      action: file src=/usr/lib/x86_64-linux-gnu/libjpeg.so path=/usr/lib/libjpeg.so state=link
    - name: Add symlinks to libfreetype for PIL
      action: file src=/usr/lib/x86_64-linux-gnu/libfreetype.so path=/usr/lib/libfreetype.so state=link
    - name: Add symlinks to libz for PIL
      action: file src=/usr/lib/x86_64-linux-gnu/libz.so path=/usr/lib/libz.so state=link



    - name: Populate project's environment
      action: pip requirements={{ vm_project_home }}/requirements.txt virtualenv="{{ pyenv_home }}/versions/{{ project_name }}"
      sudo: no

    - name: Populate project's environment with local packages
      action: pip requirements={{ vm_project_home }}/requirements_local.txt virtualenv="{{ pyenv_home }}/versions/{{ project_name }}"
      sudo: no
